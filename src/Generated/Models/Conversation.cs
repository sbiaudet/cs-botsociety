// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace BotSociety.Runtime.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Conversation
    /// </summary>
    public partial class Conversation
    {
        /// <summary>
        /// Initializes a new instance of the Conversation class.
        /// </summary>
        public Conversation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Conversation class.
        /// </summary>
        public Conversation(string _id, string updatedAt, string createdAt, string name, string _firstMessage, Options options, Menu menu, bool setWelcome, string wsPageCategory, string wsFans, string wsText, bool rtl, string selectedVariant, string selectedModel, string channel, IList<Message> messages, string _convertedFrom = default(string), string _clonedFrom = default(string), string scenario = default(string))
        {
            this._id = _id;
            UpdatedAt = updatedAt;
            CreatedAt = createdAt;
            Name = name;
            this._firstMessage = _firstMessage;
            this._convertedFrom = _convertedFrom;
            this._clonedFrom = _clonedFrom;
            Scenario = scenario;
            Options = options;
            Menu = menu;
            SetWelcome = setWelcome;
            WsPageCategory = wsPageCategory;
            WsFans = wsFans;
            WsText = wsText;
            Rtl = rtl;
            SelectedVariant = selectedVariant;
            SelectedModel = selectedModel;
            Channel = channel;
            Messages = messages;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "_id")]
        public string _id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "updatedAt")]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdAt")]
        public string CreatedAt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "_first_message")]
        public string _firstMessage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "_converted_from")]
        public string _convertedFrom { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "_cloned_from")]
        public string _clonedFrom { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "scenario")]
        public string Scenario { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "options")]
        public Options Options { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "menu")]
        public Menu Menu { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "set_welcome")]
        public bool SetWelcome { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ws_page_category")]
        public string WsPageCategory { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ws_fans")]
        public string WsFans { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ws_text")]
        public string WsText { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "rtl")]
        public bool Rtl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "selected_variant")]
        public string SelectedVariant { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "selected_model")]
        public string SelectedModel { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "channel")]
        public string Channel { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "messages")]
        public IList<Message> Messages { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (_id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "_id");
            }
            if (UpdatedAt == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UpdatedAt");
            }
            if (CreatedAt == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CreatedAt");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (_firstMessage == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "_firstMessage");
            }
            if (Options == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Options");
            }
            if (Menu == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Menu");
            }
            if (WsPageCategory == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "WsPageCategory");
            }
            if (WsFans == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "WsFans");
            }
            if (WsText == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "WsText");
            }
            if (SelectedVariant == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SelectedVariant");
            }
            if (SelectedModel == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SelectedModel");
            }
            if (Channel == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Channel");
            }
            if (Messages == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Messages");
            }
            if (Options != null)
            {
                Options.Validate();
            }
            if (Menu != null)
            {
                Menu.Validate();
            }
            if (Messages != null)
            {
                foreach (var element in Messages)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
