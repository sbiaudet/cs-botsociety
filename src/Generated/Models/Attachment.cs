// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace BotSociety.Runtime.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Attachment
    /// </summary>
    public partial class Attachment
    {
        /// <summary>
        /// Initializes a new instance of the Attachment class.
        /// </summary>
        public Attachment()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Attachment class.
        /// </summary>
        public Attachment(IList<object> choices, IList<string> labels, string size)
        {
            Choices = choices;
            Labels = labels;
            Size = size;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "choices")]
        public IList<object> Choices { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "labels")]
        public IList<string> Labels { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "size")]
        public string Size { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Choices == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Choices");
            }
            if (Labels == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Labels");
            }
            if (Size == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Size");
            }
        }
    }
}
