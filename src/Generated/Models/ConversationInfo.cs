// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace BotSociety.Runtime.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// ConversationInfo
    /// </summary>
    public partial class ConversationInfo
    {
        /// <summary>
        /// Initializes a new instance of the ConversationInfo class.
        /// </summary>
        public ConversationInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConversationInfo class.
        /// </summary>
        public ConversationInfo(string _id, string updatedAt, string createdAt, string name, string selectedVariant, string selectedModel, string channel, bool createdByMe, string _convertedFrom = default(string), string _clonedFrom = default(string), string scenario = default(string))
        {
            this._id = _id;
            UpdatedAt = updatedAt;
            CreatedAt = createdAt;
            Name = name;
            this._convertedFrom = _convertedFrom;
            this._clonedFrom = _clonedFrom;
            Scenario = scenario;
            SelectedVariant = selectedVariant;
            SelectedModel = selectedModel;
            Channel = channel;
            CreatedByMe = createdByMe;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "_id")]
        public string _id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "updatedAt")]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdAt")]
        public string CreatedAt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "_converted_from")]
        public string _convertedFrom { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "_cloned_from")]
        public string _clonedFrom { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "scenario")]
        public string Scenario { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "selected_variant")]
        public string SelectedVariant { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "selected_model")]
        public string SelectedModel { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "channel")]
        public string Channel { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdByMe")]
        public bool CreatedByMe { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (_id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "_id");
            }
            if (UpdatedAt == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UpdatedAt");
            }
            if (CreatedAt == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CreatedAt");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (SelectedVariant == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SelectedVariant");
            }
            if (SelectedModel == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SelectedModel");
            }
            if (Channel == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Channel");
            }
        }
    }
}
