// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace BotSociety.Runtime.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Message
    /// </summary>
    public partial class Message
    {
        /// <summary>
        /// Initializes a new instance of the Message class.
        /// </summary>
        public Message()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Message class.
        /// </summary>
        public Message(string _id, string updatedAt, string createdAt, string _conversation, bool isLeftSide, string text, string type, IList<Attachment> attachments, string nextMessage, bool isNextMessageLinked, IList<string> prevLinkedMessages, int showTime, bool isFirstMessage, string textWithVariables, int progressiveId, string intent, string customLabel = default(string), string nextAlternative = default(string), string prevAlternative = default(string), string prevMessage = default(string))
        {
            this._id = _id;
            UpdatedAt = updatedAt;
            CreatedAt = createdAt;
            this._conversation = _conversation;
            CustomLabel = customLabel;
            IsLeftSide = isLeftSide;
            Text = text;
            Type = type;
            NextAlternative = nextAlternative;
            PrevAlternative = prevAlternative;
            Attachments = attachments;
            NextMessage = nextMessage;
            IsNextMessageLinked = isNextMessageLinked;
            PrevLinkedMessages = prevLinkedMessages;
            PrevMessage = prevMessage;
            ShowTime = showTime;
            IsFirstMessage = isFirstMessage;
            TextWithVariables = textWithVariables;
            ProgressiveId = progressiveId;
            Intent = intent;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "_id")]
        public string _id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "updatedAt")]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdAt")]
        public string CreatedAt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "_conversation")]
        public string _conversation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "custom_label")]
        public string CustomLabel { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "is_left_side")]
        public bool IsLeftSide { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "text")]
        public string Text { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "next_alternative")]
        public string NextAlternative { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "prev_alternative")]
        public string PrevAlternative { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "attachments")]
        public IList<Attachment> Attachments { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "next_message")]
        public string NextMessage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "is_next_message_linked")]
        public bool IsNextMessageLinked { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "prev_linked_messages")]
        public IList<string> PrevLinkedMessages { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "prev_message")]
        public string PrevMessage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "show_time")]
        public int ShowTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "is_first_message")]
        public bool IsFirstMessage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "text_with_variables")]
        public string TextWithVariables { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "progressiveId")]
        public int ProgressiveId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "intent")]
        public string Intent { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (_id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "_id");
            }
            if (UpdatedAt == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UpdatedAt");
            }
            if (CreatedAt == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CreatedAt");
            }
            if (_conversation == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "_conversation");
            }
            if (Text == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Text");
            }
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (Attachments == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Attachments");
            }
            if (NextMessage == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NextMessage");
            }
            if (PrevLinkedMessages == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PrevLinkedMessages");
            }
            if (TextWithVariables == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TextWithVariables");
            }
            if (Intent == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Intent");
            }
            if (Attachments != null)
            {
                foreach (var element in Attachments)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
