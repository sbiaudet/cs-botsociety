// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace BotSociety.Runtime
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Retrieve the content of your chatbot designs automagically.
    /// This is the documentation for the version 1.1 of the API.
    /// Please feel free to drop questions at info@botsociety.io
    /// </summary>
    public partial interface IBotsocietyAPI : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


        /// <summary>
        /// Auth
        /// </summary>
        /// <remarks>
        /// Go to your profile page in Botsociety
        /// https://app.botsociety.io/#/account/api
        /// and generate your API key by clicking on "Generate new API key"
        /// Then add it to your request's header as shown on the right hand
        /// side (click "Auth" above so see an example).
        /// You should expect to receive the following response if everything
        /// goes well:
        /// ```
        /// {
        /// "auth": true,
        /// "info": "You are successfully calling the API. This is just a test
        /// API to check your authentication params."
        /// }
        /// ```
        /// In case of errors, you should expect to receive the following
        /// response:
        /// ```
        /// {
        /// "auth": false,
        /// "info": "User not auth for the API. Please go to
        /// https://app.botsociety.io/#/account/api and generate your API Key.
        /// You can find our API documentation here:
        /// https://botsociety.docs.apiary.io"
        /// }
        /// ```
        /// This is just a test API to check your authentication params.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> AuthWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List conversations
        /// </summary>
        /// <remarks>
        /// This endpoint will list all of your conversations, together with
        /// their name and other details.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ConversationInfo>>> ConversationsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get conversation
        /// </summary>
        /// <remarks>
        /// This endpoint will list the details of a specific conversation.
        /// You have to specify a conversation ID, which you can get from the
        /// previous request.
        /// Also, you can get the conversation ID by visiting the building mode
        /// page, the conversation ID is in the right side.
        /// </remarks>
        /// <param name='conversationId'>
        /// ID of the Conversation to retrieve.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Conversation>> GetConversationWithHttpMessagesAsync(string conversationId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get message
        /// </summary>
        /// <remarks>
        /// You can call this endpoint to get the content of a specific
        /// message, once you know the unique ID or the progressive ID.
        /// You can get the progressive ID by visiting the building mode page
        /// (Build button), progressive ID is referenced as "ID".
        /// </remarks>
        /// <param name='conversationId'>
        /// ID of the Conversation to retrieve.
        /// </param>
        /// <param name='messageId'>
        /// ID of the Message to retrieve. This can be or the unique ID or the
        /// progressive ID.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Message>> GetMessageWithHttpMessagesAsync(string conversationId, string messageId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get variables
        /// </summary>
        /// <remarks>
        /// This endpoint will list the variables of a specific conversation.
        /// Variables may contain one or more values.
        /// You have to specify a conversation ID.
        /// </remarks>
        /// <param name='conversationId'>
        /// ID of the Conversation to retrieve.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Variable>> GetVariablesWithHttpMessagesAsync(string conversationId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
